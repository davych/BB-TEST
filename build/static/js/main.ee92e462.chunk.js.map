{"version":3,"sources":["theme.js","modules/Home/styles.js","modules/Home/redux/action.js","modules/Home/Detail.js","modules/Home/router.js","router.js","common/request.js","modules/Home/redux/reducer.js","redux/reducers.js","modules/Home/services.js","modules/Home/redux/saga.js","redux/sagas.js","redux/index.js","index.js"],"names":["responsiveFontSizes","createMuiTheme","makeStyles","theme","root","breakpoints","up","width","media","backgroundSize","height","connect","state","TVShow","dispatch","ownProps","getTVShow","id","type","action","withWidth","props","classes","useStyles","useEffect","Card","className","CardActionArea","CardMedia","image","isWidthUp","title","CardContent","Typography","gutterBottom","variant","component","data","name","color","summary","CardActions","process","REACT_APP_API_LINK","Home","exact","path","App","console","log","request","options","this","HTTPService","axios","create","baseURL","timeout","interceptors","use","requestSuccess","requestFail","response","responseSuccess","responseFail","config","a","Object","assign","withCredentials","rejectUnauthorized","requestCert","agent","error","Promise","reject","requestStatus","status","isloading","errMsg","store","payload","combineReducers","get","watchTVShow","put","call","homeServices","message","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","middlewares","createStore","rootReducer","applyMiddleware","run","rootSagas","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.ee92e462.chunk.js","sourcesContent":["import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\r\n\r\nexport default responsiveFontSizes(createMuiTheme());\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n  root: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '50vh',\r\n    },\r\n  },\r\n  media: {\r\n    backgroundSize: 'contain',\r\n    height: '50vh',\r\n  },\r\n}));\r\n","export default {\r\n  get: 'HOME_GET',\r\n  set: 'HOME_SET',\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '@material-ui/core/Card';\r\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport lodash from 'lodash';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport useStyles from './styles';\r\nimport action from './redux/action';\r\nimport { connect } from 'react-redux';\r\nconst Detail = (props) => {\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    props.getTVShow(1);\r\n  }, []);\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={\r\n            isWidthUp('sm', props.width)\r\n              ? 'https://static.tvmaze.com/uploads/images/original_untouched/81/202627.jpg'\r\n              : 'https://static.tvmaze.com/uploads/images/medium_portrait/81/202627.jpg'\r\n          }\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {props.TVShow.data?.name}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {props.TVShow.data?.summary}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>tobe cnfitiu{process.env.REACT_APP_API_LINK}</CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nDetail.propTypes = {\r\n  width: PropTypes.any,\r\n  TVShow: PropTypes.object,\r\n  getTVShow: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  TVShow: state.TVShow,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  getTVShow: (id) =>\r\n    dispatch({\r\n      type: action.get,\r\n      id,\r\n    }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(Detail));\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Detail from './Detail';\r\n\r\nexport default function Home() {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <Detail />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport Home from '@/modules/Home/router';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <Home />\r\n    </Router>\r\n  );\r\n}\r\n","/**\r\n * desc\r\n * @fileoverview\r\n *  1. request can be used directly, the interceptors are defined in the Request class\r\n *  2. Request also can be used, but need to use new statement first.\r\n *    const request = new Request({ requestSuccess<function>, requestFail<function>,responseSuccess<function>,responseFail<function> })\r\n */\r\nimport axios from 'axios';\r\nconsole.log('process.env.REACT_APP_API_LINK', process.env.REACT_APP_API_LINK);\r\nclass Requestor {\r\n  constructor(options = {}) {\r\n    this.HTTPService = axios.create({\r\n      baseURL: process.env.REACT_APP_API_LINK || '/',\r\n      timeout: 10000,\r\n    });\r\n    this.HTTPService.interceptors.request.use(\r\n      options.requestSuccess || this.requestSuccess,\r\n      options.requestFail || this.requestFail,\r\n    );\r\n    this.HTTPService.interceptors.response.use(\r\n      options.responseSuccess || this.responseSuccess,\r\n      options.responseFail || this.responseFail,\r\n    );\r\n    return this.HTTPService;\r\n  }\r\n\r\n  async requestSuccess(config) {\r\n    // set default axios options\r\n    Object.assign(config, {\r\n      withCredentials: true,\r\n      rejectUnauthorized: false,\r\n      requestCert: true,\r\n      agent: false,\r\n    });\r\n    return config;\r\n  }\r\n\r\n  requestFail(error) {\r\n    return Promise.reject(error);\r\n  }\r\n\r\n  responseSuccess(response) {\r\n    return response;\r\n  }\r\n\r\n  responseFail(error) {\r\n    return Promise.reject(error);\r\n  }\r\n}\r\nconst request = new Requestor();\r\nconst requestStatus = {\r\n  none: () => ({\r\n    status: 'none',\r\n    isloading: false,\r\n    error: '',\r\n  }),\r\n  fetching: () => ({\r\n    status: 'fetching',\r\n    isloading: true,\r\n    error: '',\r\n  }),\r\n  fulfilled: () => ({\r\n    status: 'success',\r\n    isloading: false,\r\n    error: '',\r\n  }),\r\n  fail: (errMsg) => ({\r\n    status: 'failure',\r\n    isloading: false,\r\n    error: errMsg,\r\n  }),\r\n};\r\n\r\nexport default request;\r\nexport { requestStatus };\r\n","import action from './action';\r\nimport { requestStatus } from '@/common';\r\nconst store = {\r\n  data: {},\r\n  ...requestStatus.none,\r\n};\r\n\r\nconst TVShow = (state = store, { type, payload }) => {\r\n  switch (type) {\r\n    case action.set:\r\n      return { ...state, ...payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default TVShow;\r\n","import { combineReducers } from 'redux';\r\nimport TVShow from '@/modules/Home/redux/reducer';\r\n\r\nexport default combineReducers({\r\n  TVShow,\r\n});\r\n","import { request } from '@/common';\r\n\r\nexport const getTVShow = (id) => request.get(`shows/${id}`);\r\n","import { put, takeEvery, call } from 'redux-saga/effects';\r\nimport action from './action';\r\nimport * as homeServices from '../services';\r\nimport { requestStatus } from '@/common';\r\nfunction* getTVShow({ id }) {\r\n  try {\r\n    yield put({ type: action.set, payload: requestStatus.fetching() });\r\n    const data = yield call(homeServices.getTVShow, id);\r\n    yield put({ type: action.set, payload: { ...requestStatus.fulfilled(), data } });\r\n  } catch (error) {\r\n    yield put({ type: action.set, payload: requestStatus.fail(error.message) });\r\n  }\r\n}\r\n\r\nexport default function* watchTVShow() {\r\n  yield takeEvery(action.get, getTVShow);\r\n}\r\n","import { all } from 'redux-saga/effects';\r\nimport watchTVShow from '@/modules/Home/redux/saga';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([watchTVShow()]);\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer from './reducers.js';\r\nimport rootSagas from './sagas';\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middlewares = [sagaMiddleware];\r\n\r\nif (process.env.NODE_ENV === `development`) {\r\n  const { logger } = require('redux-logger');\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\nsagaMiddleware.run(rootSagas);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport theme from './theme';\r\nimport Router from './router';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ThemeProvider theme={theme}>\r\n      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n      <CssBaseline />\r\n      <Router />\r\n    </ThemeProvider>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}